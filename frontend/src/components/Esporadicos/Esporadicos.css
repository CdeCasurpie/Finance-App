/*
<div className="main-container">
    <h1>Esporadicos</h1>
    <div className="esporadicos-container">
        <div className="mov-container">
            <span>Movimientos</span>
        </div>
        <div className="monto-container">
            {movimientos.map((movimiento) => {
                return (
                    <div className={`register tipo-${movimiento.tipo}`} key={movimiento.id}>
                        <div className="detalles">
                            <span>{movimiento.descripcion}</span>
                            <div className="Fecha">{movimiento.fecha} - {movimiento.detalle_pago}</div>
                        </div>
                        <div className="monto">
                            <span
                                style={
                                    movimiento.tipo === "ingreso" ? {} : { color: "red" }
                                }
                            >{movimiento.tipo === "ingreso" ? "+" : "-"} ${movimiento.monto}</span>
                        </div>
                    </div>
                )
            })}
        </div>
        { !spectator && (
            <div className="nuevo">
                <div className="gastoN">
                    <button className="gastoB" onClick={() => {
                        cambiarEstadoformG(!estadoformG);
                        const containerOverlay = document.querySelector('.containerOverlay');
                        if (containerOverlay) {
                            containerOverlay.classList.add('show');
                        }
                    }}>
                        Nuevo Gasto
                    </button>


                    {(estadoformG || estadoformI) && (
                        <div className="overlay">
                            <div className="containerOverlay">
                                <div className="encabezadoOverlay">
                                    <h2>Registrar nuevo Gasto</h2>
                                    <button className="cerrarOverlay" onClick={() => {
                                        cambiarEstadoformG(false);
                                        cambiarEstadoformI(false);
                                        const containerOverlay = document.querySelector('.containerOverlay');
                                        if (containerOverlay) {
                                            containerOverlay.classList.remove('show');
                                        }
                                    } }>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="bi bi-x-lg" viewBox="0 0 16 16">
                                            <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" />
                                        </svg>
                                    </button>
                                </div>
                                <form className="formNewG" onSubmit={ (e) => {
                                    e.preventDefault();
                                    if (estadoformG) {
                                        crearIngresoGasto(e, "gasto");
                                    } else if (estadoformI) {
                                        crearIngresoGasto(e, "ingreso");
                                    }
                                }}>
                                    <div className="campo">
                                        <label htmlFor="descripcion">Descripci贸n:</label>
                                        <input type="text" id="descripcion" required />
                                    </div>
                                    <div className="campo">
                                        <label htmlFor="detallePago">Detalle de Pago:</label>
                                        <input type="text" id="detallePago" required />
                                    </div>
                                    <div className="campo">
                                        <label htmlFor="monto">Monto:</label>
                                        <input type="number" id="monto" required />
                                    </div>
                                    <div className="campo">
                                        <label htmlFor="fecha">Fecha:</label>
                                        <input type="date" id="fecha" required />
                                    </div>
                                    <li>
                                        {errors.map((error) => (
                                            <div className="error">{error}</div>
                                        ))}
                                    </li>
                                    <button type="submit">
                                        { estadoformG && "Registrar Gasto" }
                                        { estadoformI && "Registrar Ingreso" }
                                    </button>
                                </form>
                            </div>
                        </div>
                    )}
                </div>
                <div className="ingresoN">
                    <button className="ingresoB" onClick={() => {
                        cambiarEstadoformI(!estadoformI); 
                        const containerOverlay = document.querySelector('.containerOverlay');
                        if (containerOverlay) {
                            containerOverlay.classList.add('show');
                        }
                    }}>
                        Nuevo Ingreso
                    </button>
                </div>
            </div>
        )}
    </div>
</div>
*/

.esporadicos-container {
    background-color: var(--card-color);
    border-radius: 10px;
    flex-grow: 1;
    display: grid;
    grid-template-rows: 10vh 50vh 10vh;
    max-height: 100%;
    padding-right: 5px;

}

/* estilos para el contenedor de los movimientos */

.mov-container {
    padding: 1.5rem;
    background-color: var(--card-color);
    border-radius: 10px 10px 0 0;
    color: var(--text-color);
    font-size: 1.5rem;
    width: 100%;
}

.mov-container span {
    display: block;
    border-bottom: 1px solid var(--primary-color);
    width: 100%;
    text-align: left;
    padding: 0.5rem 0 1rem 0
}

/* estilos para el contenedor de los montos */
.monto-container {
    overflow-y: auto;
    display: flex;
    gap: 1rem;
    padding: 1rem;
    justify-content: space-between;
    align-items: flex-start;
    flex-direction: column;
}
/* estilos para los registros de los movimientos */

.register {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-radius: 10px;
    background-color: var(--card-color);
    width: 100%;
    color: var(--text-color);
}

.register .detalles {
    display: flex;
    flex-direction: column;
}

.register .monto span {
    font-size: 1.1rem;
    width: 100%;
    text-align: right;
}

.register .monto span.red {
    color: red;
}

/* estilos para el contenedor de los botones de nuevo gasto e ingreso */

.nuevo {
    display: flex;
    justify-content: space-around;
    padding: 1rem;
    gap: 1rem;
}

/* estilos para el bot贸n de nuevo gasto */

.gastoN {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 50%;
}

.gastoB {
    background-color: var(--primary-color);
    color: var(--primary-color-text);
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    width: 100%;
}

/* estilos para el bot贸n de nuevo ingreso */

.ingresoN {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-grow: 1;
}

.ingresoB {
    background-color: var(--secondary-color);
    color: var(--card-color);
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    width: 100%;
}

/* estilos para el overlay */

.overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
}

.containerOverlay {
    background-color: var(--card-color);
    border-radius: 10px;
    padding: 1rem;
    position: relative;
}

.encabezadoOverlay {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.cerrarOverlay {
    background-color: var(--button-color);
    color: var(--text-color);
    padding: 0.5rem;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

/* estilos para el formulario de nuevo gasto */

.formNewG {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
    padding: 1rem;
}

.campo {
    display: flex;
    flex-direction: column;
}

.campo label {
    color: var(--text-color);
}

.campo input {
    padding: 0.5rem;
    border: 1px solid var(--text-color);
    border-radius: 5px;
}

.campo input:focus {
    outline: none;
}

.error {
    color: red;
}

/* estilos para el bot贸n de submit */

button[type="submit"] {
    background-color: var(--button-color);
    color: var(--text-color);
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

/* estilos para lista de errores */

li {
    list-style: none;
}

