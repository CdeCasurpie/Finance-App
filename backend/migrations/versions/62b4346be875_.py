"""empty message

Revision ID: 62b4346be875
Revises: 
Create Date: 2024-07-05 15:02:41.332256

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column, select, update
from sqlalchemy import String, Boolean, DateTime, Text
import json

# revision identifiers, used by Alembic.
revision = '62b4346be875'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('cliente', schema=None) as batch_op:
        batch_op.add_column(sa.Column('status_history', sa.Text(), nullable=True))

    # Definir la tabla cliente para la consulta
    cliente_table = table('cliente', 
                          column('id', String), 
                          column('status', Boolean), 
                          column('status_history', Text), 
                          column('fecha_instalacion', DateTime))

    # Obtener una conexión a la base de datos
    conn = op.get_bind()

    # Seleccionar las columnas relevantes de la tabla cliente
    result = conn.execute(select(cliente_table.c.id, 
                                 cliente_table.c.status, 
                                 cliente_table.c.status_history,
                                 cliente_table.c.fecha_instalacion))

    # Para cada fila, actualizar `status` y agregar el estado actual a `status_history`
    for row in result:
        status_history = row.status_history
        
        # Si el historial de estado es None, inicializamos una lista vacía
        if status_history is None:
            status_history_list = []
        else:
            status_history_list = json.loads(status_history)
        
        # Añadir el estado actual y la fecha de instalación al historial
        status_history_list.append({
            "status": row.status,
            "date": row.fecha_instalacion.isoformat() if row.fecha_instalacion else None
        })

        # Actualizar la fila con el nuevo `status` y `status_history`
        conn.execute(
            update(cliente_table).where(cliente_table.c.id == row.id).values(
                status=True,  # Actualiza el `status` a True
                status_history=json.dumps(status_history_list)  # Actualiza el historial con el nuevo valor
            )
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('cliente', schema=None) as batch_op:
        batch_op.drop_column('status_history')

    # ### end Alembic commands ###
